// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opentelemetry/proto/metrics/v1/metrics.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v11 "github.com/open-telemetry/opentelemetry-proto/gen/go/common/v1"
	v1 "github.com/open-telemetry/opentelemetry-proto/gen/go/resource/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MetricDescriptor_ValueType int32

const (
	MetricDescriptor_INVALID_VALUE_TYPE MetricDescriptor_ValueType = 0
	MetricDescriptor_SCALAR_INT64       MetricDescriptor_ValueType = 2
	MetricDescriptor_SCALAR_DOUBLE      MetricDescriptor_ValueType = 3
	MetricDescriptor_HISTOGRAM_INT64    MetricDescriptor_ValueType = 4
	MetricDescriptor_HISTOGRAM_DOUBLE   MetricDescriptor_ValueType = 5
	MetricDescriptor_SUMMARY_INT64      MetricDescriptor_ValueType = 6
	MetricDescriptor_SUMMARY_DOUBLE     MetricDescriptor_ValueType = 7
	MetricDescriptor_RAW_INT64          MetricDescriptor_ValueType = 8
	MetricDescriptor_RAW_DOUBLE         MetricDescriptor_ValueType = 10
)

var MetricDescriptor_ValueType_name = map[int32]string{
	0:  "INVALID_VALUE_TYPE",
	2:  "SCALAR_INT64",
	3:  "SCALAR_DOUBLE",
	4:  "HISTOGRAM_INT64",
	5:  "HISTOGRAM_DOUBLE",
	6:  "SUMMARY_INT64",
	7:  "SUMMARY_DOUBLE",
	8:  "RAW_INT64",
	10: "RAW_DOUBLE",
}

var MetricDescriptor_ValueType_value = map[string]int32{
	"INVALID_VALUE_TYPE": 0,
	"SCALAR_INT64":       2,
	"SCALAR_DOUBLE":      3,
	"HISTOGRAM_INT64":    4,
	"HISTOGRAM_DOUBLE":   5,
	"SUMMARY_INT64":      6,
	"SUMMARY_DOUBLE":     7,
	"RAW_INT64":          8,
	"RAW_DOUBLE":         10,
}

func (x MetricDescriptor_ValueType) String() string {
	return proto.EnumName(MetricDescriptor_ValueType_name, int32(x))
}

func (MetricDescriptor_ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 0}
}

type MetricDescriptor_KindMask int32

const (
	MetricDescriptor_INVALID_KIND_MASK MetricDescriptor_KindMask = 0
	// One of the following three MUST be set. There are 3 exclusive Temporality kinds.
	MetricDescriptor_INSTANTANEOUS MetricDescriptor_KindMask = 1
	MetricDescriptor_CUMULATIVE    MetricDescriptor_KindMask = 2
	MetricDescriptor_DELTA         MetricDescriptor_KindMask = 4
	// One of the following two MUST be set. There are 2 exclusive Structure kinds.
	MetricDescriptor_GROUPING MetricDescriptor_KindMask = 8
	MetricDescriptor_ADDING   MetricDescriptor_KindMask = 16
	// May be set with ADDING.
	MetricDescriptor_MONOTONIC MetricDescriptor_KindMask = 32
	// May be set for any instrument.
	MetricDescriptor_SYNCHRONOUS MetricDescriptor_KindMask = 64
)

var MetricDescriptor_KindMask_name = map[int32]string{
	0:  "INVALID_KIND_MASK",
	1:  "INSTANTANEOUS",
	2:  "CUMULATIVE",
	4:  "DELTA",
	8:  "GROUPING",
	16: "ADDING",
	32: "MONOTONIC",
	64: "SYNCHRONOUS",
}

var MetricDescriptor_KindMask_value = map[string]int32{
	"INVALID_KIND_MASK": 0,
	"INSTANTANEOUS":     1,
	"CUMULATIVE":        2,
	"DELTA":             4,
	"GROUPING":          8,
	"ADDING":            16,
	"MONOTONIC":         32,
	"SYNCHRONOUS":       64,
}

func (x MetricDescriptor_KindMask) String() string {
	return proto.EnumName(MetricDescriptor_KindMask_name, int32(x))
}

func (MetricDescriptor_KindMask) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 1}
}

type MetricDescriptor_Kind int32

const (
	MetricDescriptor_INVALID_KIND                                MetricDescriptor_Kind = 0
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS  MetricDescriptor_Kind = 113
	MetricDescriptor_ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS MetricDescriptor_Kind = 49
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS     MetricDescriptor_Kind = 114
	MetricDescriptor_ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS    MetricDescriptor_Kind = 50
	MetricDescriptor_ADDING_MONOTONIC_DELTA_SYNCHRONOUS          MetricDescriptor_Kind = 116
	MetricDescriptor_ADDING_MONOTONIC_DELTA_ASYNCHRONOUS         MetricDescriptor_Kind = 52
	MetricDescriptor_ADDING_INSTANTANEOUS_SYNCHRONOUS            MetricDescriptor_Kind = 81
	MetricDescriptor_ADDING_INSTANTANEOUS_ASYNCHRONOUS           MetricDescriptor_Kind = 17
	MetricDescriptor_ADDING_CUMULATIVE_SYNCHRONOUS               MetricDescriptor_Kind = 82
	MetricDescriptor_ADDING_CUMULATIVE_ASYNCHRONOUS              MetricDescriptor_Kind = 18
	MetricDescriptor_ADDING_DELTA_SYNCHRONOUS                    MetricDescriptor_Kind = 84
	MetricDescriptor_ADDING_DELTA_ASYNCHRONOUS                   MetricDescriptor_Kind = 20
	MetricDescriptor_GROUPING_INSTANTANEOUS_SYNCHRONOUS          MetricDescriptor_Kind = 73
	MetricDescriptor_GROUPING_INSTANTANEOUS_ASYNCHRONOUS         MetricDescriptor_Kind = 9
	MetricDescriptor_GROUPING_CUMULATIVE_SYNCHRONOUS             MetricDescriptor_Kind = 74
	MetricDescriptor_GROUPING_CUMULATIVE_ASYNCHRONOUS            MetricDescriptor_Kind = 10
	MetricDescriptor_GROUPING_DELTA_SYNCHRONOUS                  MetricDescriptor_Kind = 76
	MetricDescriptor_GROUPING_DELTA_ASYNCHRONOUS                 MetricDescriptor_Kind = 12
)

var MetricDescriptor_Kind_name = map[int32]string{
	0:   "INVALID_KIND",
	113: "ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS",
	49:  "ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS",
	114: "ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS",
	50:  "ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS",
	116: "ADDING_MONOTONIC_DELTA_SYNCHRONOUS",
	52:  "ADDING_MONOTONIC_DELTA_ASYNCHRONOUS",
	81:  "ADDING_INSTANTANEOUS_SYNCHRONOUS",
	17:  "ADDING_INSTANTANEOUS_ASYNCHRONOUS",
	82:  "ADDING_CUMULATIVE_SYNCHRONOUS",
	18:  "ADDING_CUMULATIVE_ASYNCHRONOUS",
	84:  "ADDING_DELTA_SYNCHRONOUS",
	20:  "ADDING_DELTA_ASYNCHRONOUS",
	73:  "GROUPING_INSTANTANEOUS_SYNCHRONOUS",
	9:   "GROUPING_INSTANTANEOUS_ASYNCHRONOUS",
	74:  "GROUPING_CUMULATIVE_SYNCHRONOUS",
	10:  "GROUPING_CUMULATIVE_ASYNCHRONOUS",
	76:  "GROUPING_DELTA_SYNCHRONOUS",
	12:  "GROUPING_DELTA_ASYNCHRONOUS",
}

var MetricDescriptor_Kind_value = map[string]int32{
	"INVALID_KIND": 0,
	"ADDING_MONOTONIC_INSTANTANEOUS_SYNCHRONOUS":  113,
	"ADDING_MONOTONIC_INSTANTANEOUS_ASYNCHRONOUS": 49,
	"ADDING_MONOTONIC_CUMULATIVE_SYNCHRONOUS":     114,
	"ADDING_MONOTONIC_CUMULATIVE_ASYNCHRONOUS":    50,
	"ADDING_MONOTONIC_DELTA_SYNCHRONOUS":          116,
	"ADDING_MONOTONIC_DELTA_ASYNCHRONOUS":         52,
	"ADDING_INSTANTANEOUS_SYNCHRONOUS":            81,
	"ADDING_INSTANTANEOUS_ASYNCHRONOUS":           17,
	"ADDING_CUMULATIVE_SYNCHRONOUS":               82,
	"ADDING_CUMULATIVE_ASYNCHRONOUS":              18,
	"ADDING_DELTA_SYNCHRONOUS":                    84,
	"ADDING_DELTA_ASYNCHRONOUS":                   20,
	"GROUPING_INSTANTANEOUS_SYNCHRONOUS":          73,
	"GROUPING_INSTANTANEOUS_ASYNCHRONOUS":         9,
	"GROUPING_CUMULATIVE_SYNCHRONOUS":             74,
	"GROUPING_CUMULATIVE_ASYNCHRONOUS":            10,
	"GROUPING_DELTA_SYNCHRONOUS":                  76,
	"GROUPING_DELTA_ASYNCHRONOUS":                 12,
}

func (x MetricDescriptor_Kind) String() string {
	return proto.EnumName(MetricDescriptor_Kind_name, int32(x))
}

func (MetricDescriptor_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3, 2}
}

type ResourceMetrics struct {
	Resource                      *v1.Resource                     `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	InstrumentationLibraryMetrics []*InstrumentationLibraryMetrics `protobuf:"bytes,2,rep,name=instrumentation_library_metrics,json=instrumentationLibraryMetrics,proto3" json:"instrumentation_library_metrics,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                         `json:"-"`
	XXX_unrecognized              []byte                           `json:"-"`
	XXX_sizecache                 int32                            `json:"-"`
}

func (m *ResourceMetrics) Reset()         { *m = ResourceMetrics{} }
func (m *ResourceMetrics) String() string { return proto.CompactTextString(m) }
func (*ResourceMetrics) ProtoMessage()    {}
func (*ResourceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{0}
}

func (m *ResourceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceMetrics.Unmarshal(m, b)
}
func (m *ResourceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceMetrics.Marshal(b, m, deterministic)
}
func (m *ResourceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceMetrics.Merge(m, src)
}
func (m *ResourceMetrics) XXX_Size() int {
	return xxx_messageInfo_ResourceMetrics.Size(m)
}
func (m *ResourceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceMetrics proto.InternalMessageInfo

func (m *ResourceMetrics) GetResource() *v1.Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceMetrics) GetInstrumentationLibraryMetrics() []*InstrumentationLibraryMetrics {
	if m != nil {
		return m.InstrumentationLibraryMetrics
	}
	return nil
}

type InstrumentationLibraryMetrics struct {
	InstrumentationLibrary *v11.InstrumentationLibrary `protobuf:"bytes,1,opt,name=instrumentation_library,json=instrumentationLibrary,proto3" json:"instrumentation_library,omitempty"`
	Metrics                []*Metric                   `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}                    `json:"-"`
	XXX_unrecognized       []byte                      `json:"-"`
	XXX_sizecache          int32                       `json:"-"`
}

func (m *InstrumentationLibraryMetrics) Reset()         { *m = InstrumentationLibraryMetrics{} }
func (m *InstrumentationLibraryMetrics) String() string { return proto.CompactTextString(m) }
func (*InstrumentationLibraryMetrics) ProtoMessage()    {}
func (*InstrumentationLibraryMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{1}
}

func (m *InstrumentationLibraryMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Unmarshal(m, b)
}
func (m *InstrumentationLibraryMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Marshal(b, m, deterministic)
}
func (m *InstrumentationLibraryMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentationLibraryMetrics.Merge(m, src)
}
func (m *InstrumentationLibraryMetrics) XXX_Size() int {
	return xxx_messageInfo_InstrumentationLibraryMetrics.Size(m)
}
func (m *InstrumentationLibraryMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentationLibraryMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentationLibraryMetrics proto.InternalMessageInfo

func (m *InstrumentationLibraryMetrics) GetInstrumentationLibrary() *v11.InstrumentationLibrary {
	if m != nil {
		return m.InstrumentationLibrary
	}
	return nil
}

func (m *InstrumentationLibraryMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Metric struct {
	MetricDescriptor     *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	Points               []*DataPoint      `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{2}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetPoints() []*DataPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

type MetricDescriptor struct {
	Name                 string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description          string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Unit                 string                     `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	ValueType            MetricDescriptor_ValueType `protobuf:"varint,4,opt,name=value_type,json=valueType,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_ValueType" json:"value_type,omitempty"`
	Kind                 MetricDescriptor_Kind      `protobuf:"varint,5,opt,name=kind,proto3,enum=opentelemetry.proto.metrics.v1.MetricDescriptor_Kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{3}
}

func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (m *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(m, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetValueType() MetricDescriptor_ValueType {
	if m != nil {
		return m.ValueType
	}
	return MetricDescriptor_INVALID_VALUE_TYPE
}

func (m *MetricDescriptor) GetKind() MetricDescriptor_Kind {
	if m != nil {
		return m.Kind
	}
	return MetricDescriptor_INVALID_KIND
}

type DataPoint struct {
	// (Same comment)
	Labels []*v11.StringKeyValue `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// (Same comment)
	// If omitted and not instantaneous, this is taken as the default _REPORT_TIMESTAMP_.
	StartTimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	// (Same comment)
	// Use this in conjunction with `value_int64` and `value_double`, or `summary`.
	// When the kind is instantaneous, this field applies to *this point*.
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// INT64/FLOAT ADDING -> Sum (Counter), Grouping -> RAW (Gauge); This
	// could be "last value" or it could be a random value (or other
	// selection approach)
	ValueInt64  int64   `protobuf:"varint,4,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	ValueDouble float64 `protobuf:"fixed64,5,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	// HISTOGRAM
	// (Similar comments)
	// Note this is an exact representation for Adding instruments.
	Histogram *Histogram `protobuf:"bytes,6,opt,name=histogram,proto3" json:"histogram,omitempty"`
	// SUMMARY
	// (see changes below)
	Summary *Summary `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	// Optional exemplars
	Exemplars            []*RawValue `protobuf:"bytes,8,rep,name=exemplars,proto3" json:"exemplars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DataPoint) Reset()         { *m = DataPoint{} }
func (m *DataPoint) String() string { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()    {}
func (*DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{4}
}

func (m *DataPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataPoint.Unmarshal(m, b)
}
func (m *DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataPoint.Marshal(b, m, deterministic)
}
func (m *DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPoint.Merge(m, src)
}
func (m *DataPoint) XXX_Size() int {
	return xxx_messageInfo_DataPoint.Size(m)
}
func (m *DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DataPoint proto.InternalMessageInfo

func (m *DataPoint) GetLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *DataPoint) GetStartTimeUnixNano() uint64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *DataPoint) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *DataPoint) GetValueInt64() int64 {
	if m != nil {
		return m.ValueInt64
	}
	return 0
}

func (m *DataPoint) GetValueDouble() float64 {
	if m != nil {
		return m.ValueDouble
	}
	return 0
}

func (m *DataPoint) GetHistogram() *Histogram {
	if m != nil {
		return m.Histogram
	}
	return nil
}

func (m *DataPoint) GetSummary() *Summary {
	if m != nil {
		return m.Summary
	}
	return nil
}

func (m *DataPoint) GetExemplars() []*RawValue {
	if m != nil {
		return m.Exemplars
	}
	return nil
}

// SummaryDataPoint is a single data point in a timeseries that describes the time-varying
// values of a Summary metric.
type Summary struct {
	// Remove the labels, start_time, and time TODO.
	//
	// fields: Add min, max, last fields
	// as described in https://github.com/open-telemetry/oteps/pull/117
	//
	// (Same comment)
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// (Same comment)
	SumInt64  int64   `protobuf:"varint,2,opt,name=sum_int64,json=sumInt64,proto3" json:"sum_int64,omitempty"`
	SumDouble float64 `protobuf:"fixed64,3,opt,name=sum_double,json=sumDouble,proto3" json:"sum_double,omitempty"`
	// MIN, MAX, LAST value
	MinInt64   int64   `protobuf:"varint,4,opt,name=min_int64,json=minInt64,proto3" json:"min_int64,omitempty"`
	MinDouble  float64 `protobuf:"fixed64,5,opt,name=min_double,json=minDouble,proto3" json:"min_double,omitempty"`
	MaxInt64   int64   `protobuf:"varint,6,opt,name=max_int64,json=maxInt64,proto3" json:"max_int64,omitempty"`
	MaxDouble  float64 `protobuf:"fixed64,7,opt,name=max_double,json=maxDouble,proto3" json:"max_double,omitempty"`
	LastInt64  int64   `protobuf:"varint,8,opt,name=last_int64,json=lastInt64,proto3" json:"last_int64,omitempty"`
	LastDouble float64 `protobuf:"fixed64,9,opt,name=last_double,json=lastDouble,proto3" json:"last_double,omitempty"`
	// (Same comment)
	QuantileValues       []*Summary_ValueAtQuantile `protobuf:"bytes,10,rep,name=quantile_values,json=quantileValues,proto3" json:"quantile_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Summary) Reset()         { *m = Summary{} }
func (m *Summary) String() string { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()    {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5}
}

func (m *Summary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summary.Unmarshal(m, b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return xxx_messageInfo_Summary.Size(m)
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Summary) GetSumInt64() int64 {
	if m != nil {
		return m.SumInt64
	}
	return 0
}

func (m *Summary) GetSumDouble() float64 {
	if m != nil {
		return m.SumDouble
	}
	return 0
}

func (m *Summary) GetMinInt64() int64 {
	if m != nil {
		return m.MinInt64
	}
	return 0
}

func (m *Summary) GetMinDouble() float64 {
	if m != nil {
		return m.MinDouble
	}
	return 0
}

func (m *Summary) GetMaxInt64() int64 {
	if m != nil {
		return m.MaxInt64
	}
	return 0
}

func (m *Summary) GetMaxDouble() float64 {
	if m != nil {
		return m.MaxDouble
	}
	return 0
}

func (m *Summary) GetLastInt64() int64 {
	if m != nil {
		return m.LastInt64
	}
	return 0
}

func (m *Summary) GetLastDouble() float64 {
	if m != nil {
		return m.LastDouble
	}
	return 0
}

func (m *Summary) GetQuantileValues() []*Summary_ValueAtQuantile {
	if m != nil {
		return m.QuantileValues
	}
	return nil
}

// (Similar comments)
type Summary_ValueAtQuantile struct {
	Quantile             float64  `protobuf:"fixed64,1,opt,name=quantile,proto3" json:"quantile,omitempty"`
	ValueInt64           int64    `protobuf:"varint,2,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	ValueDouble          float64  `protobuf:"fixed64,3,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Summary_ValueAtQuantile) Reset()         { *m = Summary_ValueAtQuantile{} }
func (m *Summary_ValueAtQuantile) String() string { return proto.CompactTextString(m) }
func (*Summary_ValueAtQuantile) ProtoMessage()    {}
func (*Summary_ValueAtQuantile) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{5, 0}
}

func (m *Summary_ValueAtQuantile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summary_ValueAtQuantile.Unmarshal(m, b)
}
func (m *Summary_ValueAtQuantile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summary_ValueAtQuantile.Marshal(b, m, deterministic)
}
func (m *Summary_ValueAtQuantile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary_ValueAtQuantile.Merge(m, src)
}
func (m *Summary_ValueAtQuantile) XXX_Size() int {
	return xxx_messageInfo_Summary_ValueAtQuantile.Size(m)
}
func (m *Summary_ValueAtQuantile) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary_ValueAtQuantile.DiscardUnknown(m)
}

var xxx_messageInfo_Summary_ValueAtQuantile proto.InternalMessageInfo

func (m *Summary_ValueAtQuantile) GetQuantile() float64 {
	if m != nil {
		return m.Quantile
	}
	return 0
}

func (m *Summary_ValueAtQuantile) GetValueInt64() int64 {
	if m != nil {
		return m.ValueInt64
	}
	return 0
}

func (m *Summary_ValueAtQuantile) GetValueDouble() float64 {
	if m != nil {
		return m.ValueDouble
	}
	return 0
}

type RawValue struct {
	// Numerical value of the measurement that was recorded. Only one of these
	// two fields is used for the data, based on MetricDescriptor.measurement_type
	ValueDouble float64 `protobuf:"fixed64,1,opt,name=value_double,json=valueDouble,proto3" json:"value_double,omitempty"`
	ValueInt64  int64   `protobuf:"varint,2,opt,name=value_int64,json=valueInt64,proto3" json:"value_int64,omitempty"`
	// Exact time that the measurement was recorded
	TimeUnixNano uint64 `protobuf:"fixed64,3,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// Labels that were passed with the measurement, but not included in the DataPoint's labels
	AdditionalLabels []*v11.StringKeyValue `protobuf:"bytes,4,rep,name=additional_labels,json=additionalLabels,proto3" json:"additional_labels,omitempty"`
	// (Optional) Span ID of the current trace
	SpanId []byte `protobuf:"bytes,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// (Optional) Trace ID of the current trace
	TraceId []byte `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// (Optional) When sample_count is non-zero, this exemplar has been chosen in a statistically
	// unbiased way such that the exemplar is representative of `sample_count` individual events
	SampleCount          float64  `protobuf:"fixed64,7,opt,name=sample_count,json=sampleCount,proto3" json:"sample_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawValue) Reset()         { *m = RawValue{} }
func (m *RawValue) String() string { return proto.CompactTextString(m) }
func (*RawValue) ProtoMessage()    {}
func (*RawValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{6}
}

func (m *RawValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawValue.Unmarshal(m, b)
}
func (m *RawValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawValue.Marshal(b, m, deterministic)
}
func (m *RawValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawValue.Merge(m, src)
}
func (m *RawValue) XXX_Size() int {
	return xxx_messageInfo_RawValue.Size(m)
}
func (m *RawValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RawValue.DiscardUnknown(m)
}

var xxx_messageInfo_RawValue proto.InternalMessageInfo

func (m *RawValue) GetValueDouble() float64 {
	if m != nil {
		return m.ValueDouble
	}
	return 0
}

func (m *RawValue) GetValueInt64() int64 {
	if m != nil {
		return m.ValueInt64
	}
	return 0
}

func (m *RawValue) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *RawValue) GetAdditionalLabels() []*v11.StringKeyValue {
	if m != nil {
		return m.AdditionalLabels
	}
	return nil
}

func (m *RawValue) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *RawValue) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *RawValue) GetSampleCount() float64 {
	if m != nil {
		return m.SampleCount
	}
	return 0
}

type Histogram struct {
	// count is the number of values in the population. Must be non-negative. This value
	// must be equal to the sum of the "count" fields in buckets if a histogram is provided.
	Count uint64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// sum of the values in the population. If count is zero then this field
	// must be zero. This value must be equal to the sum of the "sum" fields in buckets if
	// a histogram is provided.
	Sum float64 `protobuf:"fixed64,5,opt,name=sum,proto3" json:"sum,omitempty"`
	// buckets is an optional field contains the values of histogram for each bucket.
	//
	// The sum of the values in the buckets "count" field must equal the value in the count field.
	//
	// The number of elements in buckets array must be by one greater than the
	// number of elements in bucket_bounds array.
	//
	// Note: if HistogramDataPoint.bucket_options defines bucket bounds then this field
	// must also be present and number of elements in this field must be equal to the
	// number of buckets defined by bucket_options.
	Buckets []*Histogram_Bucket `protobuf:"bytes,6,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// explicit_bounds specifies buckets with explicitly defined bounds for values.
	// The bucket boundaries are described by "bounds" field.
	//
	// This defines size(bounds) + 1 (= N) buckets. The boundaries for bucket
	// at index i are:
	//
	// [0, bounds[i]) for i == 0
	// [bounds[i-1], bounds[i]) for 0 < i < N-1
	// [bounds[i], +infinity) for i == N-1
	// The values in bounds array must be strictly increasing and > 0.
	//
	// Note: only [a, b) intervals are currently supported for each bucket. If we decides
	// to also support (a, b] intervals we should add support for these by defining a boolean
	// value which decides what type of intervals to use.
	ExplicitBounds       []float64 `protobuf:"fixed64,7,rep,packed,name=explicit_bounds,json=explicitBounds,proto3" json:"explicit_bounds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Histogram) Reset()         { *m = Histogram{} }
func (m *Histogram) String() string { return proto.CompactTextString(m) }
func (*Histogram) ProtoMessage()    {}
func (*Histogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7}
}

func (m *Histogram) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Histogram.Unmarshal(m, b)
}
func (m *Histogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Histogram.Marshal(b, m, deterministic)
}
func (m *Histogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Histogram.Merge(m, src)
}
func (m *Histogram) XXX_Size() int {
	return xxx_messageInfo_Histogram.Size(m)
}
func (m *Histogram) XXX_DiscardUnknown() {
	xxx_messageInfo_Histogram.DiscardUnknown(m)
}

var xxx_messageInfo_Histogram proto.InternalMessageInfo

func (m *Histogram) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Histogram) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *Histogram) GetBuckets() []*Histogram_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

func (m *Histogram) GetExplicitBounds() []float64 {
	if m != nil {
		return m.ExplicitBounds
	}
	return nil
}

// Bucket contains values for a bucket.
type Histogram_Bucket struct {
	// The number of values in each bucket of the histogram, as described by
	// bucket_options.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// exemplar is an optional representative value of the bucket.
	Exemplar             *Histogram_Bucket_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *Histogram_Bucket) Reset()         { *m = Histogram_Bucket{} }
func (m *Histogram_Bucket) String() string { return proto.CompactTextString(m) }
func (*Histogram_Bucket) ProtoMessage()    {}
func (*Histogram_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7, 0}
}

func (m *Histogram_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Histogram_Bucket.Unmarshal(m, b)
}
func (m *Histogram_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Histogram_Bucket.Marshal(b, m, deterministic)
}
func (m *Histogram_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Histogram_Bucket.Merge(m, src)
}
func (m *Histogram_Bucket) XXX_Size() int {
	return xxx_messageInfo_Histogram_Bucket.Size(m)
}
func (m *Histogram_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_Histogram_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_Histogram_Bucket proto.InternalMessageInfo

func (m *Histogram_Bucket) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Histogram_Bucket) GetExemplar() *Histogram_Bucket_Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Histogram values. They are metadata that gives information about a
// particular value added to a Histogram bucket.
type Histogram_Bucket_Exemplar struct {
	// Value of the exemplar point. It determines which bucket the exemplar belongs to.
	// If bucket_options define bounds for this bucket then this value must be within
	// the defined bounds.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// time_unix_nano is the moment when this exemplar was recorded.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	TimeUnixNano uint64 `protobuf:"fixed64,2,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// exemplar_attachments are contextual information about the example value.
	// Keys in this list must be unique.
	Attachments          []*v11.StringKeyValue `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Histogram_Bucket_Exemplar) Reset()         { *m = Histogram_Bucket_Exemplar{} }
func (m *Histogram_Bucket_Exemplar) String() string { return proto.CompactTextString(m) }
func (*Histogram_Bucket_Exemplar) ProtoMessage()    {}
func (*Histogram_Bucket_Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c3112f9fa006917, []int{7, 0, 0}
}

func (m *Histogram_Bucket_Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Histogram_Bucket_Exemplar.Unmarshal(m, b)
}
func (m *Histogram_Bucket_Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Histogram_Bucket_Exemplar.Marshal(b, m, deterministic)
}
func (m *Histogram_Bucket_Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Histogram_Bucket_Exemplar.Merge(m, src)
}
func (m *Histogram_Bucket_Exemplar) XXX_Size() int {
	return xxx_messageInfo_Histogram_Bucket_Exemplar.Size(m)
}
func (m *Histogram_Bucket_Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_Histogram_Bucket_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_Histogram_Bucket_Exemplar proto.InternalMessageInfo

func (m *Histogram_Bucket_Exemplar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Histogram_Bucket_Exemplar) GetTimeUnixNano() uint64 {
	if m != nil {
		return m.TimeUnixNano
	}
	return 0
}

func (m *Histogram_Bucket_Exemplar) GetAttachments() []*v11.StringKeyValue {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func init() {
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_ValueType", MetricDescriptor_ValueType_name, MetricDescriptor_ValueType_value)
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_KindMask", MetricDescriptor_KindMask_name, MetricDescriptor_KindMask_value)
	proto.RegisterEnum("opentelemetry.proto.metrics.v1.MetricDescriptor_Kind", MetricDescriptor_Kind_name, MetricDescriptor_Kind_value)
	proto.RegisterType((*ResourceMetrics)(nil), "opentelemetry.proto.metrics.v1.ResourceMetrics")
	proto.RegisterType((*InstrumentationLibraryMetrics)(nil), "opentelemetry.proto.metrics.v1.InstrumentationLibraryMetrics")
	proto.RegisterType((*Metric)(nil), "opentelemetry.proto.metrics.v1.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "opentelemetry.proto.metrics.v1.MetricDescriptor")
	proto.RegisterType((*DataPoint)(nil), "opentelemetry.proto.metrics.v1.DataPoint")
	proto.RegisterType((*Summary)(nil), "opentelemetry.proto.metrics.v1.Summary")
	proto.RegisterType((*Summary_ValueAtQuantile)(nil), "opentelemetry.proto.metrics.v1.Summary.ValueAtQuantile")
	proto.RegisterType((*RawValue)(nil), "opentelemetry.proto.metrics.v1.RawValue")
	proto.RegisterType((*Histogram)(nil), "opentelemetry.proto.metrics.v1.Histogram")
	proto.RegisterType((*Histogram_Bucket)(nil), "opentelemetry.proto.metrics.v1.Histogram.Bucket")
	proto.RegisterType((*Histogram_Bucket_Exemplar)(nil), "opentelemetry.proto.metrics.v1.Histogram.Bucket.Exemplar")
}

func init() {
	proto.RegisterFile("opentelemetry/proto/metrics/v1/metrics.proto", fileDescriptor_3c3112f9fa006917)
}

var fileDescriptor_3c3112f9fa006917 = []byte{
	// 1421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xcd, 0x72, 0xdb, 0x54,
	0x14, 0xae, 0x6c, 0xc7, 0xb6, 0x8e, 0xd3, 0x44, 0xb9, 0x84, 0x56, 0x4d, 0x49, 0x93, 0xb8, 0xa5,
	0x49, 0xff, 0x9c, 0x26, 0xb4, 0x65, 0x60, 0x86, 0xa1, 0x4a, 0x6c, 0x52, 0x35, 0xfe, 0x49, 0xaf,
	0xed, 0x30, 0xe9, 0x0c, 0x23, 0x14, 0x5b, 0x93, 0x6a, 0x6a, 0x49, 0xae, 0x74, 0x15, 0x9c, 0x07,
	0x60, 0xc1, 0x8a, 0x25, 0x5b, 0x76, 0xcc, 0xf0, 0x06, 0xb0, 0xe3, 0x11, 0x18, 0x5e, 0x80, 0x25,
	0x8f, 0xc1, 0xdc, 0x1f, 0xd9, 0x56, 0x6c, 0xc7, 0x69, 0x77, 0xf7, 0x9e, 0xf3, 0x7d, 0xdf, 0x3d,
	0xe7, 0xe8, 0xdc, 0x23, 0x09, 0x1e, 0x7a, 0x5d, 0xcb, 0x25, 0x56, 0xc7, 0x72, 0x2c, 0xe2, 0x9f,
	0x6d, 0x76, 0x7d, 0x8f, 0x78, 0x9b, 0x74, 0x6d, 0xb7, 0x82, 0xcd, 0xd3, 0xad, 0x68, 0x59, 0x60,
	0x0e, 0x74, 0x2b, 0x86, 0xe6, 0xc6, 0x42, 0x04, 0x39, 0xdd, 0x5a, 0xba, 0x3f, 0x4e, 0xad, 0xe5,
	0x39, 0x8e, 0xe7, 0x52, 0x31, 0xbe, 0xe2, 0xb4, 0xa5, 0xc2, 0x38, 0xac, 0x6f, 0x05, 0x5e, 0xe8,
	0xb7, 0x2c, 0x8a, 0x8e, 0xd6, 0x1c, 0x9f, 0xff, 0x57, 0x82, 0x79, 0x2c, 0x4c, 0x15, 0x7e, 0x24,
	0x2a, 0x41, 0x36, 0x42, 0xa9, 0xd2, 0xaa, 0xb4, 0x91, 0xdb, 0xbe, 0x57, 0x18, 0x17, 0x62, 0x5f,
	0xea, 0x74, 0xab, 0x10, 0x69, 0xe0, 0x3e, 0x15, 0xfd, 0x28, 0xc1, 0x8a, 0xed, 0x06, 0xc4, 0x0f,
	0x1d, 0xcb, 0x25, 0x26, 0xb1, 0x3d, 0xd7, 0xe8, 0xd8, 0xc7, 0xbe, 0xe9, 0x9f, 0x19, 0x22, 0x3b,
	0x35, 0xb1, 0x9a, 0xdc, 0xc8, 0x6d, 0x7f, 0x55, 0xb8, 0xb8, 0x02, 0x05, 0x3d, 0x2e, 0x53, 0xe6,
	0x2a, 0x22, 0x5e, 0xbc, 0x6c, 0x5f, 0xe4, 0xce, 0xff, 0x2d, 0xc1, 0xf2, 0x85, 0x02, 0xc8, 0x85,
	0xeb, 0x13, 0x02, 0x15, 0xf9, 0x3f, 0x1d, 0x1b, 0xa0, 0x28, 0xfc, 0xc4, 0xf8, 0xf0, 0xb5, 0xf1,
	0x81, 0xa1, 0xe7, 0x90, 0x89, 0x17, 0xe0, 0xee, 0xb4, 0x02, 0xf0, 0x48, 0x71, 0x44, 0xcb, 0xff,
	0x2e, 0x41, 0x9a, 0xdb, 0xd0, 0x77, 0xb0, 0xc0, 0xad, 0x46, 0xdb, 0x0a, 0x5a, 0xbe, 0xdd, 0x25,
	0x9e, 0x2f, 0xc2, 0x7e, 0x7c, 0x39, 0xd9, 0x62, 0x9f, 0x87, 0x15, 0xe7, 0x9c, 0x05, 0x69, 0x90,
	0xee, 0x7a, 0xb6, 0x4b, 0xa2, 0x50, 0xef, 0x4d, 0xd3, 0x2c, 0x9a, 0xc4, 0x3c, 0xa0, 0x0c, 0x2c,
	0x88, 0xf9, 0x5f, 0x01, 0x94, 0xf3, 0x27, 0x21, 0x04, 0x29, 0xd7, 0x74, 0x78, 0x83, 0xc9, 0x98,
	0xad, 0xd1, 0x2a, 0xe4, 0xa2, 0x1c, 0x6c, 0xcf, 0x55, 0x13, 0xcc, 0x35, 0x6c, 0xa2, 0xac, 0xd0,
	0xb5, 0x89, 0x9a, 0xe4, 0x2c, 0xba, 0x46, 0x47, 0x00, 0xa7, 0x66, 0x27, 0xb4, 0x0c, 0x72, 0xd6,
	0xb5, 0xd4, 0xd4, 0xaa, 0xb4, 0x31, 0xb7, 0xfd, 0xe5, 0xfb, 0x66, 0x5e, 0x38, 0xa4, 0x12, 0x8d,
	0xb3, 0xae, 0x85, 0xe5, 0xd3, 0x68, 0x89, 0x74, 0x48, 0xbd, 0xb5, 0xdd, 0xb6, 0x3a, 0xc3, 0x44,
	0x9f, 0xbe, 0xb7, 0xe8, 0xbe, 0xed, 0xb6, 0x31, 0x93, 0xc8, 0xff, 0x21, 0x81, 0xdc, 0x3f, 0x03,
	0x5d, 0x03, 0xa4, 0x57, 0x0f, 0xb5, 0xb2, 0x5e, 0x34, 0x0e, 0xb5, 0x72, 0xb3, 0x64, 0x34, 0x8e,
	0x0e, 0x4a, 0xca, 0x15, 0xa4, 0xc0, 0x6c, 0x7d, 0x57, 0x2b, 0x6b, 0xd8, 0xd0, 0xab, 0x8d, 0x67,
	0x4f, 0x94, 0x04, 0x5a, 0x80, 0xab, 0xc2, 0x52, 0xac, 0x35, 0x77, 0xca, 0x25, 0x25, 0x89, 0x3e,
	0x82, 0xf9, 0x17, 0x7a, 0xbd, 0x51, 0xdb, 0xc3, 0x5a, 0x45, 0xe0, 0x52, 0x68, 0x11, 0x94, 0x81,
	0x51, 0x40, 0x67, 0x18, 0xbb, 0x59, 0xa9, 0x68, 0xf8, 0x48, 0x00, 0xd3, 0x08, 0xc1, 0x5c, 0x64,
	0x12, 0xb0, 0x0c, 0xba, 0x0a, 0x32, 0xd6, 0xbe, 0x15, 0x90, 0x2c, 0x9a, 0x03, 0xa0, 0x5b, 0xe1,
	0x86, 0xfc, 0x4f, 0x12, 0x64, 0x69, 0x2a, 0x15, 0x33, 0x78, 0x8b, 0x3e, 0x86, 0x85, 0x28, 0xf4,
	0x7d, 0xbd, 0x5a, 0x34, 0x2a, 0x5a, 0x7d, 0x5f, 0xb9, 0x42, 0x4f, 0xd2, 0xab, 0xf5, 0x86, 0x56,
	0x6d, 0x68, 0xd5, 0x52, 0xad, 0x59, 0x57, 0x24, 0x2a, 0xb3, 0xdb, 0xac, 0x34, 0xcb, 0x5a, 0x43,
	0x3f, 0x2c, 0x29, 0x09, 0x24, 0xc3, 0x4c, 0xb1, 0x54, 0x6e, 0x68, 0x4a, 0x0a, 0xcd, 0x42, 0x76,
	0x0f, 0xd7, 0x9a, 0x07, 0x7a, 0x75, 0x4f, 0xc9, 0x22, 0x80, 0xb4, 0x56, 0x2c, 0xd2, 0xb5, 0x42,
	0x43, 0xa9, 0xd4, 0xaa, 0xb5, 0x46, 0xad, 0xaa, 0xef, 0x2a, 0xab, 0x68, 0x1e, 0x72, 0xf5, 0xa3,
	0xea, 0xee, 0x0b, 0x5c, 0xab, 0x52, 0xd1, 0xe7, 0xf9, 0x7f, 0x66, 0x20, 0x45, 0x63, 0xa1, 0xa5,
	0x1a, 0x8e, 0x43, 0xb9, 0x82, 0x0a, 0x70, 0x9f, 0xcb, 0x18, 0x7d, 0x05, 0x23, 0x16, 0x93, 0x31,
	0x2c, 0xf5, 0x0e, 0x6d, 0xc2, 0x83, 0x29, 0x78, 0x6d, 0x98, 0xb0, 0x85, 0x1e, 0xc0, 0xfa, 0x08,
	0x61, 0x90, 0x61, 0x4c, 0xdd, 0x47, 0x0f, 0x61, 0xe3, 0x22, 0x70, 0x4c, 0x7a, 0x1b, 0xdd, 0x85,
	0xfc, 0x08, 0x9a, 0x15, 0x2b, 0xa6, 0x4a, 0xd0, 0x3a, 0xdc, 0x9e, 0x80, 0x8b, 0x09, 0x3e, 0x41,
	0x77, 0x60, 0x55, 0x00, 0x27, 0x97, 0xe0, 0x15, 0xfa, 0x14, 0xd6, 0xc6, 0xa2, 0x62, 0x62, 0x0b,
	0x68, 0x0d, 0x96, 0x05, 0x6c, 0x42, 0xba, 0x18, 0xe5, 0xe1, 0xd6, 0x28, 0x24, 0x26, 0x83, 0xd0,
	0x27, 0xa0, 0x0a, 0xcc, 0x68, 0x6a, 0x0d, 0xb4, 0x0c, 0x37, 0x62, 0xde, 0x18, 0x79, 0x91, 0x56,
	0x28, 0x6a, 0x99, 0x0b, 0x52, 0xd2, 0x69, 0x85, 0x26, 0xe0, 0x62, 0x82, 0x32, 0xba, 0x0d, 0x2b,
	0x7d, 0xe0, 0x84, 0xb4, 0x5e, 0xd2, 0x32, 0x8e, 0x03, 0xc5, 0xa4, 0x00, 0xdd, 0x82, 0xa5, 0x3e,
	0x6a, 0x34, 0xb5, 0x32, 0x5a, 0x81, 0x9b, 0xe7, 0xfc, 0x31, 0x81, 0xd9, 0xfc, 0x5f, 0x49, 0x90,
	0xfb, 0x83, 0x13, 0x95, 0x20, 0xdd, 0x31, 0x8f, 0xad, 0x4e, 0xa0, 0x4a, 0x6c, 0xe6, 0x3e, 0x9a,
	0xf2, 0xfa, 0xa9, 0x13, 0xdf, 0x76, 0x4f, 0xf6, 0xad, 0x33, 0x36, 0x60, 0xb0, 0x20, 0xa3, 0x4d,
	0x58, 0x0c, 0x88, 0xe9, 0x13, 0x83, 0xd8, 0x8e, 0x65, 0x84, 0xae, 0xdd, 0x33, 0x5c, 0xd3, 0xf5,
	0xd8, 0x5c, 0x4d, 0xe3, 0x05, 0xe6, 0x6b, 0xd8, 0x8e, 0xd5, 0x74, 0xed, 0x5e, 0xd5, 0x74, 0x3d,
	0x74, 0x07, 0xe6, 0xce, 0x41, 0x93, 0x0c, 0x3a, 0x4b, 0x86, 0x51, 0x2b, 0x90, 0xe3, 0xf3, 0xd6,
	0x76, 0xc9, 0xb3, 0x27, 0x6c, 0xe0, 0x26, 0x31, 0x1f, 0xc1, 0x3a, 0xb5, 0xa0, 0x35, 0x98, 0xe5,
	0x80, 0xb6, 0x17, 0x1e, 0x77, 0x2c, 0x36, 0x3d, 0x25, 0xcc, 0x49, 0x45, 0x66, 0x42, 0x7b, 0x20,
	0xbf, 0xb1, 0x03, 0xe2, 0x9d, 0xf8, 0xa6, 0xa3, 0xa6, 0x2f, 0xf8, 0xc6, 0x18, 0x9a, 0xae, 0x2f,
	0x22, 0x02, 0x1e, 0x70, 0x91, 0x06, 0x99, 0x20, 0x74, 0x1c, 0xfa, 0xaa, 0xce, 0x30, 0x99, 0xf5,
	0x69, 0x32, 0x75, 0x0e, 0xc7, 0x11, 0x0f, 0x7d, 0x03, 0xb2, 0xd5, 0xb3, 0x9c, 0x6e, 0xc7, 0xf4,
	0x03, 0x35, 0xcb, 0x0a, 0xbe, 0x31, 0x4d, 0x04, 0x9b, 0x3f, 0xf0, 0x5a, 0x0f, 0xa8, 0xf9, 0xff,
	0x92, 0x90, 0x11, 0xe2, 0x68, 0x11, 0x66, 0x5a, 0x5e, 0xe8, 0x12, 0xf6, 0x7a, 0x4b, 0x61, 0xbe,
	0x41, 0x37, 0x41, 0x0e, 0x42, 0x47, 0xd4, 0x2d, 0xc1, 0xea, 0x96, 0x0d, 0x42, 0x87, 0x57, 0x6d,
	0x19, 0x80, 0x3a, 0x45, 0xcd, 0x92, 0xac, 0x66, 0x14, 0x2e, 0x2a, 0x76, 0x13, 0x64, 0xc7, 0x76,
	0x63, 0x35, 0xcf, 0x3a, 0xb6, 0xdb, 0xe7, 0x52, 0x67, 0xac, 0xde, 0x14, 0x3e, 0xc4, 0x35, 0x7b,
	0x82, 0x9b, 0x16, 0x5c, 0xb3, 0x37, 0xe0, 0x9a, 0xbd, 0x88, 0x9b, 0x11, 0x5c, 0xb3, 0x27, 0xb8,
	0xcb, 0x00, 0x1d, 0x33, 0x20, 0x82, 0x9c, 0x65, 0x64, 0x99, 0x5a, 0x38, 0x7b, 0x05, 0x72, 0xcc,
	0x2d, 0xe8, 0x32, 0xa3, 0x33, 0x86, 0xe0, 0x7f, 0x0f, 0xf3, 0xef, 0x42, 0xd3, 0x25, 0x76, 0xc7,
	0x32, 0x58, 0x07, 0x04, 0x2a, 0xb0, 0x1a, 0x7f, 0x7e, 0xc9, 0x07, 0xc5, 0xdf, 0xcc, 0x1a, 0x79,
	0x25, 0x54, 0xf0, 0x5c, 0xa4, 0xc7, 0x1c, 0xc1, 0xd2, 0x3b, 0x98, 0x3f, 0x07, 0x41, 0x4b, 0x90,
	0x8d, 0x40, 0xec, 0x09, 0x48, 0xb8, 0xbf, 0x3f, 0xdf, 0xbe, 0x89, 0xa9, 0xed, 0x9b, 0x1c, 0x69,
	0xdf, 0xfc, 0x6f, 0x09, 0xc8, 0x46, 0x2d, 0x30, 0x82, 0x97, 0x46, 0xdb, 0x7d, 0xea, 0x99, 0x97,
	0xbb, 0x79, 0xaf, 0x61, 0xc1, 0x6c, 0xb7, 0x6d, 0xfa, 0x25, 0x64, 0x76, 0x0c, 0x31, 0x22, 0x52,
	0x1f, 0x32, 0x22, 0x94, 0x81, 0x4e, 0x99, 0x0f, 0x8b, 0xeb, 0x90, 0x09, 0xba, 0xa6, 0x6b, 0xd8,
	0xfc, 0x6b, 0x67, 0x16, 0xa7, 0xe9, 0x56, 0x6f, 0xa3, 0x1b, 0x90, 0x25, 0xbe, 0xd9, 0xb2, 0xa8,
	0x27, 0xcd, 0x3c, 0x19, 0xb6, 0xd7, 0xdb, 0x34, 0xf3, 0xc0, 0x74, 0xba, 0x1d, 0xcb, 0xe0, 0xcd,
	0xce, 0x9b, 0x27, 0xc7, 0x6d, 0xbb, 0xd4, 0x94, 0xff, 0x33, 0x09, 0x72, 0xff, 0xe2, 0x0e, 0xae,
	0x45, 0x6a, 0xf8, 0x5a, 0x28, 0x90, 0x0c, 0x42, 0x47, 0xb4, 0x2d, 0x5d, 0xa2, 0x97, 0x90, 0x39,
	0x0e, 0x5b, 0x6f, 0x2d, 0x12, 0xa8, 0x69, 0x96, 0xde, 0xe3, 0x4b, 0x0f, 0x87, 0xc2, 0x0e, 0x23,
	0xe2, 0x48, 0x00, 0xad, 0xc3, 0xbc, 0xd5, 0xeb, 0x76, 0xec, 0x96, 0x4d, 0x8c, 0x63, 0x2f, 0x74,
	0xdb, 0x81, 0x9a, 0x59, 0x4d, 0x6e, 0x48, 0x78, 0x2e, 0x32, 0xef, 0x30, 0xeb, 0xd2, 0xcf, 0x09,
	0x48, 0x73, 0xf2, 0x84, 0xeb, 0xdb, 0x84, 0x6c, 0x74, 0xdb, 0xd9, 0x23, 0xcc, 0x6d, 0x7f, 0xf1,
	0xbe, 0x61, 0x15, 0x4a, 0x42, 0x00, 0xf7, 0xa5, 0x96, 0x7e, 0x91, 0x20, 0x1b, 0x99, 0xe9, 0xc9,
	0xac, 0x2d, 0x44, 0x17, 0xf1, 0xcd, 0x98, 0xf6, 0x48, 0x8c, 0x69, 0x8f, 0x1a, 0xe4, 0x4c, 0x42,
	0xcc, 0xd6, 0x1b, 0xfa, 0xc3, 0x11, 0xa8, 0xc9, 0x0f, 0x69, 0x8c, 0x61, 0x85, 0x1d, 0x02, 0x6b,
	0xb6, 0x37, 0x25, 0xc5, 0x9d, 0x59, 0xf1, 0x17, 0x75, 0x40, 0x1d, 0x07, 0xd2, 0xeb, 0xaf, 0x4f,
	0x6c, 0xf2, 0x26, 0x3c, 0xa6, 0x47, 0x6c, 0x52, 0xea, 0xa3, 0xc1, 0xdf, 0x68, 0x4c, 0xe9, 0x11,
	0xff, 0x37, 0x3d, 0xb1, 0xdc, 0xcd, 0x93, 0xe1, 0x9f, 0xe3, 0xe3, 0x34, 0x73, 0x7c, 0xf6, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0xc7, 0x77, 0x66, 0x45, 0x0f, 0x00, 0x00,
}
